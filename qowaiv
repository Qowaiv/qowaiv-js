#!/usr/bin/env nu

def main [] {
    nu ./qowaiv --help    
}

# Build qowaiv packages
def "main build" [] {
    npm run build --workspaces
}

# Test the qowaiv packages
def "main test" [] {
    npm run test --workspaces
}

def "main publish" [
    tag: string # The tag of the image (e.g., 0.0.1)!
] {

    update-package $tag "https://npm.pkg.github.com"
    
    print "Build and test the packages"
    main build
    main test

    if 'GITHUB_TOKEN' not-in $env {
        print "Set the GITHUB_TOKEN environment variable"
        $env.GITHUB_TOKEN = (gh auth token)
    }

    print "Add the GITHUB_TOKEN to the .npmrc file"
    (
        "//npm.pkg.github.com/:_authToken=" + $env.GITHUB_TOKEN + "\n\r"
             | save --append .npmrc -f
    )

    print "Publish the packages to Github registry"
    workspaces | each { | workspace |
        npm publish --workspace $workspace
    }
}

def "main release" [
    tag: string # The tag of the image (e.g., 0.0.1)!
] {

    update-package $tag "https://registry.npmjs.org"

    print "Build and test the packages"
    main build
    main test

    print "Add the NPM_TOKEN to the .npmrc file"
    (
        "//registry.npmjs.org/:_authToken=" + $env.NPM_TOKEN + "\n\r"
             | save --append .npmrc -f
    )

    print "Publish the packages NPM registry"
    workspaces | each { | workspace |
        npm publish --access public --workspace $workspace
    }
}

def "main pack" [
    tag: string # The tag of the image (e.g., 0.0.1)!
] {

    update-package $tag "https://registry.npmjs.org"

    print "Build and test the packages"
    main build
    main test

    print "Pack the packages"
    workspaces | each { | workspace |
        npm pack --workspace $workspace
    }
}

def "update-package" [
    tag: string # The tag of the image (e.g., 0.0.1)!
    registry: string # The registry to publish the package (e.g., https://npm.pkg.github.com)!
] {

    workspaces | each { | workspace |
        print $"Update ($workspace)/package.json with version tag: '($tag)' and registry: '($registry)'"
        (
            open $"($workspace)/package.json" 
                | update version $tag
                | update dependencies[@qowaiv/qowaiv] $tag
                | update publishConfig.registry registry
                | save $"($workspace)/package.json" -f
        )
    }
}

def "workspaces" [] {
    open package.json | get workspaces
}
